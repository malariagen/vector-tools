import os
import numpy as np
import pandas as pd
import re

if os.path.isfile("configuration.yml"):
  os.remove("configuration.yml")

# read_fofn
pat = re.compile("^.+(AG1000G-\D{2}(-\D)?)/agam.fofn.tsv$")
fofn_path = config["fofn"]
mm = pat.match(fofn_path)
assert mm is not None, "No sampleset found in path {!r}".format(fofn_path)
sampleset = mm.group(1)

fofn = pd.read_table(fofn_path)
samples = fofn['sample'].unique()

# create a table of paths
path_df = pd.DataFrame(index=samples)
path_df["path"] = [os.path.join(config["input_location"], x + ".zarr.zip") for x in samples]

# HACK NOT IN PRODUCTION>>>
path_df["exists"] = path_df.path.map(os.path.isfile)
samples = path_df.loc[path_df.exists].index.tolist()


rule qc_report:
  input:
    manifest=os.path.join(sampleset, "manifest"),
    csv=expand(os.path.join(sampleset, "{sample}.callstats.csv"), sample=samples),
    npy=expand(os.path.join(sampleset, "{sample}.covhist.npz"), sample=samples),
    contam=expand(os.path.join(sampleset, "{sample}.contamination.csv"), sample=samples),
    cfg=os.path.join(sampleset, "configuration.yml"),
    fofn=fofn_path
  params:
    min_fgc=config["min_fgc"],
    min_med_cov=config["min_med_cov"],
    min_male_xratio=config["min_male_xratio"],
    max_male_xratio=config["max_male_xratio"],
    min_female_xratio=config["min_female_xratio"],
    max_female_xratio=config["max_female_xratio"],
    max_pc_contam=config["max_pc_contam"],
    path=lambda y: os.path.join(sampleset, "{sample}")
  output:
    csv=os.path.join(sampleset, "qc_summary.tsv")
  script:
    "../../scripts/combine_qc_cohort_stats.py"


rule write_config:
  output:
    cfg=os.path.join(sampleset, "configuration.yml")
  run:
    import yaml
    with open(output.cfg, "w") as fh:
      yaml.dump(config, fh)


rule estimate_contamination:
  input:
    input=lambda y: path_df.path.loc[y.sample],
    sites=config["genotyped_sites"],
    allele_frequencies=config["allele_frequencies"]
  output:
    txt=os.path.join(sampleset, "{sample}.contamination.csv")
  params:
    stem="{sample}",
    seqid=config["seqid_contam"],
    downsample=config["downsample"],
    minimum_af=config["minimum_af"],
    minimum_coverage=config["minimum_coverage"],
    seq_err_rate=config["ser"],
    plot=True,
    log=False
  script: 
    "../../scripts/estimate_contamination.py"


rule coverage_summary:
  input:
    input=lambda y: path_df.path.loc[y.sample],
  output:
    csv=os.path.join(sampleset, "{sample}.callstats.csv"),
    npy=os.path.join(sampleset, "{sample}.covhist.npz")
  params:
    stem="{sample}",
    seqid=config["seqid_stats"]
  script: 
    "../../scripts/calculate_alignment_summary_stats.py"


# required for qc_report.
rule make_manifest:
   output:
     manifest=os.path.join(sampleset, "manifest")
   run:
     with open(output.manifest, "w") as fh:
       print("\n".join(samples), file=fh)

