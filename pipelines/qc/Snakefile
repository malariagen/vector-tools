import os
import numpy as np
import pandas as pd

sampleset = os.path.split(os.getcwd())[1]

# read_fofn
fofn_path = os.path.join(config["vector_ops"], "tracking", sampleset, "agam.fofn.tsv")
fofn = pd.read_table(fofn_path)
samples = fofn['sample'].unique()

# set script dir
script_dir = "../../scripts"

# create a table of paths
path_df = pd.DataFrame(index=samples)
path_df["path"] = [os.path.join(config["input_location"], x + ".zarr.zip") for x in samples]

# HACK NOT IN PRODUCTION>>>
path_df["exists"] = path_df.path.map(os.path.isfile)
samples = path_df.loc[path_df.exists].index.tolist()

rule qc_report:
  input:
    manifest="manifest",
    csv=expand("{sample}.callstats.csv", sample=samples),
    npy=expand("{sample}.covhist.npz", sample=samples),
    contam=expand("{sample}.contamination.csv", sample=samples)
  params:
    min_fgc=config["min_fgc"],
    min_med_cov=config["min_med_cov"],
    min_female_xratio=config["min_female_xratio"],
    max_male_xratio=config["max_male_xratio"],
    max_pc_contam=config["max_pc_contam"],
    path=lambda y: "{sample}"
  output:
    csv="qc_summary.tsv"
  script:
    os.path.join(script_dir, "combine_qc_cohort_stats.py")


rule estimate_contamination:
  input:
    input=lambda y: path_df.path.loc[y.sample],
    sites=config["genotyped_sites"],
    allele_frequencies=config["allele_frequencies"]
  output:
    txt="{sample}.contamination.csv"
  params:
    stem="{sample}",
    seqid=config["seqid_contam"],
    downsample=config["downsample"],
    minimum_af=config["minimum_af"],
    minimum_coverage=config["minimum_coverage"],
    seq_err_rate=config["ser"],
    plot=True,
    log=False
  script: 
    os.path.join(script_dir, "estimate_contamination.py")


rule coverage_summary:
  input:
    input=lambda y: path_df.path.loc[y.sample],
  output:
    csv="{sample}.callstats.csv",
    npy="{sample}.covhist.npz"
  params:
    stem="{sample}",
    seqid=config["seqid_stats"]
  script: 
    os.path.join(script_dir, "calculate_alignment_summary_stats.py")


# required for qc_report.
rule make_manifest:
   output:
     manifest="manifest"
   run:
     with open(output.manifest, "w") as fh:
       print("\n".join(samples), file=fh)

