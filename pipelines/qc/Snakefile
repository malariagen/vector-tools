import os
import numpy as np
import pandas as pd
import re

samplesets_output_dir = config["samplesets_output_dir"]

# read_fofn
fofn_path = config["fofn"]
sampleset = os.path.basename(os.path.dirname(fofn_path))

fofn = pd.read_csv(fofn_path, sep="\t")
samples = fofn['sample'].unique()

# create a table of paths
path_df = pd.DataFrame(index=samples)
path_df["path"] = [os.path.join(config["input_location"], x + config["gt_suffix"]) for x in samples]

rule qc_report:
  input:
    os.path.join(samplesets_output_dir, sampleset, "qc_summary.tsv")


rule generate_report:
  input:
    manifest="{samplesets_output_dir}/{sampleset}/manifest",
    csv=expand("{{samplesets_output_dir}}/{{sampleset}}/{sample}.callstats.csv", sample=samples),
    npy=expand("{{samplesets_output_dir}}/{{sampleset}}/{sample}.covhist.npz", sample=samples),
    contam=expand("{{samplesets_output_dir}}/{{sampleset}}/{sample}.contamination.csv", sample=samples),
    cfg="{samplesets_output_dir}/{sampleset}/qc_config.yml",
    fofn=fofn_path
  params:
    path=lambda y: os.path.join(samplesets_output_dir, y.sampleset, "{sample}"),
    req="h_vmem=6G"
  output:
    csv="{samplesets_output_dir}/{sampleset}/qc_summary.tsv"
  script:
    "../../scripts/combine_qc_cohort_stats.py"


rule write_config:
  output:
    cfg="{samplesets_output_dir}/{sampleset}/qc_config.yml"
  params:
    req="h_vmem=2G"
  run:
    import yaml
    with open(output.cfg, "w") as fh:
      yaml.dump(config, fh)


rule estimate_contamination:
  input:
    input=lambda y: path_df.path.loc[y.sample],
    sites=config["genotyped_sites"],
    allele_frequencies=config["allele_frequencies"]
  output:
    txt="{samplesets_output_dir}/{sampleset}/{sample}.contamination.csv"
  params:
    stem="{samplesets_output_dir}/{sampleset}/{sample}",
    seqid=config["seqid_contam"],
    downsample=config["downsample"],
    minimum_af=config["minimum_af"],
    minimum_coverage=config["minimum_coverage"],
    seq_err_rate=config["ser"],
    plot=True,
    log=False,
    req="h_vmem=12G"
  script: 
    "../../scripts/estimate_contamination.py"


rule coverage_summary:
  input:
    input=lambda y: path_df.path.loc[y.sample],
  output:
    csv="{samplesets_output_dir}/{sampleset}/{sample}.callstats.csv",
    npy="{samplesets_output_dir}/{sampleset}/{sample}.covhist.npz"
  params:
    stem="{samplesets_output_dir}/{sampleset}/{sample}",
    seqid=config["seqid_stats"],
    req="h_vmem=12G"
  script: 
    "../../scripts/calculate_alignment_summary_stats.py"


# required for qc_report.
rule make_manifest:
  output:
    manifest="{samplesets_output_dir}/{sampleset}/manifest"
  params:
    req="h_vmem=2G"
  run:
    with open(output.manifest, "w") as fh:
      print("\n".join(samples), file=fh)

